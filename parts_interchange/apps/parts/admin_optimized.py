from django.contrib import admin\nfrom django.contrib.admin import widgets\nfrom django.db import models\nfrom django.forms import ModelForm\nfrom django.conf import settings\nfrom .models import Manufacturer, PartCategory, Part, InterchangeGroup, PartInterchange\n\n\n# OPTIMIZED ADMIN FOR LIVE DATA ENTRY\n# Focused on speed and usability for real-time parts entry\n\n\nclass FastModelAdmin(admin.ModelAdmin):\n    \"\"\"Base admin class optimized for speed\"\"\"\n    list_per_page = 8  # Very small pages for instant loading\n    show_full_result_count = False  # Don't count all records\n    preserve_filters = True  # Keep filters when navigating\n    \n    # Default form optimizations\n    formfield_overrides = {\n        models.TextField: {'widget': widgets.AdminTextareaWidget(attrs={'rows': 3, 'cols': 60})},\n    }\n\n\nclass PartQuickEntryForm(ModelForm):\n    \"\"\"Optimized form for rapid part entry\"\"\"\n    class Meta:\n        model = Part\n        fields = '__all__'\n        widgets = {\n            'description': widgets.AdminTextareaWidget(attrs={'rows': 2, 'cols': 60}),\n            'notes': widgets.AdminTextareaWidget(attrs={'rows': 2, 'cols': 60}),\n            'dimensions': widgets.AdminTextInputWidget(attrs={'size': 20}),\n        }\n\n\n@admin.register(Manufacturer)\nclass ManufacturerQuickAdmin(FastModelAdmin):\n    \"\"\"Streamlined manufacturer admin for quick lookup\"\"\"\n    list_display = ['abbreviation', 'name', 'country']\n    list_filter = ['country']\n    search_fields = ['name', 'abbreviation']\n    ordering = ['abbreviation']  # Sort by short abbreviation for quick scanning\n    \n    # Simplified fieldsets for speed\n    fieldsets = (\n        (None, {\n            'fields': ('name', 'abbreviation', 'country')\n        }),\n    )\n\n\n@admin.register(PartCategory)\nclass PartCategoryQuickAdmin(FastModelAdmin):\n    \"\"\"Fast category admin\"\"\"\n    list_display = ['name', 'parent_category']\n    list_filter = ['parent_category']\n    search_fields = ['name']\n    ordering = ['name']\n    \n    # Show as tree for quick navigation\n    list_select_related = ['parent_category']\n\n\n@admin.register(Part)\nclass PartQuickEntryAdmin(FastModelAdmin):\n    \"\"\"OPTIMIZED for rapid part data entry\"\"\"\n    form = PartQuickEntryForm\n    \n    # Minimal display for speed\n    list_display = ['part_number', 'manufacturer_abbrev', 'name', 'category_name']\n    list_filter = ['manufacturer', 'category', 'is_active']\n    search_fields = ['part_number', 'name']\n    ordering = ['-created_at']  # Show newest first\n    \n    # Essential select_related for performance\n    list_select_related = ['manufacturer', 'category']\n    \n    # Autocomplete for foreign keys (MAJOR speed improvement)\n    autocomplete_fields = ['manufacturer', 'category']\n    \n    # Simplified fieldsets focused on essential data\n    fieldsets = (\n        ('Essential Information', {\n            'fields': ('manufacturer', 'part_number', 'name', 'category')\n        }),\n        ('Details', {\n            'fields': ('description', 'weight', 'dimensions'),\n            'classes': ('collapse',)  # Collapsed by default for speed\n        }),\n        ('Status', {\n            'fields': ('is_active',)\n        }),\n    )\n    \n    # Optimized queryset\n    def get_queryset(self, request):\n        return super().get_queryset(request).select_related(\n            'manufacturer', 'category'\n        )\n    \n    def manufacturer_abbrev(self, obj):\n        return obj.manufacturer.abbreviation\n    manufacturer_abbrev.short_description = 'Mfg'\n    manufacturer_abbrev.admin_order_field = 'manufacturer__abbreviation'\n    \n    def category_name(self, obj):\n        return obj.category.name\n    category_name.short_description = 'Category'\n    category_name.admin_order_field = 'category__name'\n    \n    # Quick actions for bulk operations\n    actions = ['make_active', 'make_inactive']\n    \n    def make_active(self, request, queryset):\n        updated = queryset.update(is_active=True)\n        self.message_user(request, f'{updated} parts marked as active.')\n    make_active.short_description = \"Mark selected parts as active\"\n    \n    def make_inactive(self, request, queryset):\n        updated = queryset.update(is_active=False)\n        self.message_user(request, f'{updated} parts marked as inactive.')\n    make_inactive.short_description = \"Mark selected parts as inactive\"\n\n\n# Enable autocomplete for manufacturer and category selects\n@admin.register(Manufacturer)\nclass ManufacturerAutocompleteAdmin(admin.ModelAdmin):\n    search_fields = ['name', 'abbreviation']\n    \n\n@admin.register(PartCategory)\nclass PartCategoryAutocompleteAdmin(admin.ModelAdmin):\n    search_fields = ['name']\n\n\n# Simplified interchange admin\n@admin.register(InterchangeGroup)\nclass InterchangeGroupQuickAdmin(FastModelAdmin):\n    list_display = ['name', 'category_name']\n    list_filter = ['category']\n    search_fields = ['name']\n    ordering = ['name']\n    autocomplete_fields = ['category']\n    \n    list_select_related = ['category']\n    \n    def category_name(self, obj):\n        return obj.category.name\n    category_name.short_description = 'Category'\n    category_name.admin_order_field = 'category__name'\n\n\n@admin.register(PartInterchange)\nclass PartInterchangeQuickAdmin(FastModelAdmin):\n    list_display = ['part_display', 'interchange_group', 'is_primary']\n    list_filter = ['is_primary', 'interchange_group__category']\n    search_fields = ['part__part_number', 'part__name']\n    ordering = ['-created_at']\n    \n    autocomplete_fields = ['part', 'interchange_group']\n    list_select_related = ['part__manufacturer', 'interchange_group']\n    \n    def part_display(self, obj):\n        return f\"{obj.part.manufacturer.abbreviation}-{obj.part.part_number}\"\n    part_display.short_description = 'Part'\n    part_display.admin_order_field = 'part__part_number'\n\n\n# Admin site customizations for speed\nadmin.site.site_header = \"Parts Database - Quick Entry\"\nadmin.site.site_title = \"Parts DB\"\nadmin.site.index_title = \"Quick Data Entry\"\n\n# Customize admin CSS for better UX\nclass MediaMixin:\n    class Media:\n        css = {\n            'all': ('admin/css/quick_entry.css',)\n        }\n        js = ('admin/js/quick_entry.js',)\n\n\n# Apply media to all admins\nfor model_admin in [PartQuickEntryAdmin, ManufacturerQuickAdmin, PartCategoryQuickAdmin]:\n    # Add loading indicators and keyboard shortcuts\n    if hasattr(model_admin, 'Media'):\n        model_admin.Media.css = {'all': ('admin/css/quick_entry.css',)}\n        model_admin.Media.js = ('admin/js/quick_entry.js',)\n