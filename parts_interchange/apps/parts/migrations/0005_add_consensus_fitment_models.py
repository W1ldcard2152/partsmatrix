# Generated by Django 4.2.7 on 2025-06-15 02:27

from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("parts", "0004_part_groups_performance_indexes"),
    ]

    operations = [
        migrations.CreateModel(
            name="RawListingData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("part_number", models.CharField(db_index=True, max_length=50)),
                ("vehicle_year", models.IntegerField()),
                ("vehicle_make", models.CharField(max_length=50)),
                ("vehicle_model", models.CharField(max_length=50)),
                ("vehicle_trim", models.CharField(blank=True, max_length=50)),
                ("vehicle_engine", models.CharField(blank=True, max_length=50)),
                ("source_ebay_item_id", models.CharField(blank=True, max_length=20)),
                ("seller_feedback_count", models.IntegerField(null=True)),
                ("seller_is_business", models.BooleanField(default=False)),
                ("listing_title", models.TextField()),
                (
                    "listing_price",
                    models.DecimalField(decimal_places=2, max_digits=10, null=True),
                ),
                ("extraction_date", models.DateTimeField(auto_now_add=True)),
                ("is_verified_seller", models.BooleanField(default=False)),
                ("has_oem_reference", models.BooleanField(default=False)),
                ("has_detailed_description", models.BooleanField(default=False)),
            ],
            options={
                "ordering": ["-extraction_date"],
                "indexes": [
                    models.Index(
                        fields=["part_number", "extraction_date"],
                        name="parts_rawli_part_nu_00efc5_idx",
                    ),
                    models.Index(
                        fields=["vehicle_year", "vehicle_make", "vehicle_model"],
                        name="parts_rawli_vehicle_fd9e82_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="ConflictingFitment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("part_number", models.CharField(max_length=50)),
                ("conflict_description", models.TextField()),
                (
                    "resolution_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Awaiting review"),
                            ("RESOLVED", "Conflict resolved"),
                            ("DISMISSED", "False positive conflict"),
                        ],
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("resolved_date", models.DateTimeField(blank=True, null=True)),
                ("resolved_by", models.CharField(blank=True, max_length=100)),
                ("resolution_notes", models.TextField(blank=True)),
                (
                    "conflicting_listings",
                    models.ManyToManyField(to="parts.rawlistingdata"),
                ),
            ],
            options={
                "ordering": ["-created_date"],
            },
        ),
        migrations.CreateModel(
            name="ConsensusFitment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("part_number", models.CharField(db_index=True, max_length=50)),
                ("vehicle_year", models.IntegerField()),
                ("vehicle_make", models.CharField(max_length=50)),
                ("vehicle_model", models.CharField(max_length=50)),
                ("vehicle_trim", models.CharField(blank=True, max_length=50)),
                ("vehicle_engine", models.CharField(blank=True, max_length=50)),
                (
                    "confidence_score",
                    models.DecimalField(decimal_places=2, max_digits=5),
                ),
                ("supporting_listings_count", models.IntegerField()),
                (
                    "total_weight_score",
                    models.DecimalField(decimal_places=2, max_digits=8),
                ),
                ("last_updated", models.DateTimeField(auto_now=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            (
                                "HIGH_CONFIDENCE",
                                "80%+ confidence - Ready for production",
                            ),
                            (
                                "MEDIUM_CONFIDENCE",
                                "60-79% confidence - Likely accurate",
                            ),
                            ("LOW_CONFIDENCE", "40-59% confidence - Use with caution"),
                            (
                                "NEEDS_REVIEW",
                                "Conflicting data - Manual review required",
                            ),
                            ("VERIFIED", "Manually verified by expert"),
                            ("REJECTED", "Determined to be incorrect"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "supporting_raw_listings",
                    models.ManyToManyField(
                        related_name="consensus_fitments", to="parts.rawlistingdata"
                    ),
                ),
            ],
            options={
                "ordering": ["-confidence_score", "part_number"],
                "indexes": [
                    models.Index(
                        fields=["part_number", "confidence_score"],
                        name="parts_conse_part_nu_b699f4_idx",
                    ),
                    models.Index(
                        fields=["vehicle_year", "vehicle_make", "vehicle_model"],
                        name="parts_conse_vehicle_7b31a0_idx",
                    ),
                    models.Index(
                        fields=["status", "confidence_score"],
                        name="parts_conse_status_c31877_idx",
                    ),
                ],
                "unique_together": {
                    (
                        "part_number",
                        "vehicle_year",
                        "vehicle_make",
                        "vehicle_model",
                        "vehicle_trim",
                        "vehicle_engine",
                    )
                },
            },
        ),
    ]
