#!/usr/bin/env python3
\"\"\"\nQuick script to handle the failed migration and continue with a clean slate.\n\"\"\"\n\nimport os\nimport sys\nfrom pathlib import Path\n\n# Add the parts_interchange directory to Python path\nproject_root = Path(__file__).resolve().parent\nparts_interchange_dir = project_root / 'parts_interchange'\nsys.path.insert(0, str(parts_interchange_dir))\n\n# Set up Django\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'parts_interchange.settings')\n\nimport django\ndjango.setup()\n\nfrom django.db import connection\nfrom django.core.management import execute_from_command_line\n\ndef check_migration_state():\n    \"\"\"Check the current state of migrations\"\"\"\n    print(\"=== Migration State Check ===\")\n    \n    with connection.cursor() as cursor:\n        # Check if django_migrations table exists\n        if connection.vendor == 'sqlite':\n            cursor.execute(\"\"\"\n                SELECT name FROM sqlite_master \n                WHERE type='table' AND name='django_migrations'\n            \"\"\")\n        else:\n            cursor.execute(\"\"\"\n                SELECT tablename FROM pg_tables \n                WHERE tablename='django_migrations'\n            \"\"\")\n        \n        if cursor.fetchone():\n            # Check latest migrations\n            cursor.execute(\"\"\"\n                SELECT app, name, applied \n                FROM django_migrations \n                WHERE app IN ('parts', 'vehicles', 'fitments')\n                ORDER BY applied DESC\n            \"\"\")\n            \n            migrations = cursor.fetchall()\n            print(\"Recent migrations:\")\n            for app, name, applied in migrations:\n                print(f\"  {app}.{name} - {applied}\")\n                \n            # Check if the problematic migration is marked as applied\n            cursor.execute(\"\"\"\n                SELECT COUNT(*) FROM django_migrations \n                WHERE app='parts' AND name='0002_add_performance_indexes'\n            \"\"\")\n            \n            if cursor.fetchone()[0] > 0:\n                print(\"\\n‚ö†Ô∏è  The problematic migration is marked as applied!\")\n                print(\"We need to either:\")\n                print(\"1. Delete the migration record and re-run\")\n                print(\"2. Create a new migration to fix the indexes\")\n                return True\n            else:\n                print(\"\\n‚úÖ The problematic migration is not applied yet.\")\n                print(\"We can run migrate again with the fixed migration.\")\n                return False\n        else:\n            print(\"\\nüìä No django_migrations table found. This is a fresh database.\")\n            return False\n\ndef fix_migration_state():\n    \"\"\"Fix the migration state if needed\"\"\"\n    print(\"\\n=== Fixing Migration State ===\")\n    \n    with connection.cursor() as cursor:\n        # Remove the failed migration record if it exists\n        cursor.execute(\"\"\"\n            DELETE FROM django_migrations \n            WHERE app='parts' AND name='0002_add_performance_indexes'\n        \"\"\")\n        \n        rows_deleted = cursor.rowcount\n        if rows_deleted > 0:\n            print(f\"‚úÖ Removed {rows_deleted} failed migration record(s)\")\n        else:\n            print(\"‚úÖ No migration records to remove\")\n\ndef main():\n    print(\"Django Migration Fix Tool\")\n    print(\"=\" * 40)\n    \n    # Check current state\n    has_failed_migration = check_migration_state()\n    \n    if has_failed_migration:\n        fix_migration_state()\n    \n    print(\"\\n=== Running Migrations ===\")\n    # Now run migrations again\n    try:\n        execute_from_command_line(['manage.py', 'migrate', '--verbosity=1'])\n        print(\"\\nüéâ Migrations completed successfully!\")\n    except Exception as e:\n        print(f\"\\n‚ùå Migration failed: {e}\")\n        print(\"\\nYou may need to:\")\n        print(\"1. Check the migration file syntax\")\n        print(\"2. Run: python manage.py migrate --fake parts 0002\")\n        print(\"3. Then run: python manage.py migrate\")\n\nif __name__ == '__main__':\n    main()\n